internal partial class Program
{
    public class Solution
    {
        /* 
            
            
        2 ->  1 + 1
        1 + 1
        2

        3 ->  2 + 1
        1 + 1 + 1
        2 + 1
        1 + 2

        4 ->  4 + 1
        1 + 1 + 1 + 1
        2 + 1 + 1
        2 + 2
        1 + 2 + 1
        1 + 1 + 2

        5 ->  7 + 1
        1 + 1 + 1 + 1 + 1
        2 + 1 + 1 + 1
        2 + 2 + 1
        2 + 1 + 2
        1 + 2 + 1 + 1
        1 + 2 + 2
        1 + 1 + 2 + 1
        1 + 1 + 1 + 2

        6 -> 12 + 1
        1 + 1 + 1 + 1 + 1 + 1
        2 + 1 + 1 + 1 + 1
        2 + 2 + 1 + 1
        2 + 2 + 2
        2 + 1 + 2 + 1
        2 + 1 + 1 + 2
        1 + 2 + 1 + 1 + 1
        1 + 2 + 2 + 1
        1 + 2 + 1 + 2
        1 + 1 + 2 + 1 + 1
        1 + 1 + 2 + 2
        1 + 1 + 1 + 2 + 1
        1 + 1 + 1 + 1 + 2
        
        7 -> 20 + 1
        1 + 1 + 1 + 1 + 1 + 1 + 1
        2 + 1 + 1 + 1 + 1 + 1
        2 + 2 + 1 + 1 + 1
        2 + 2 + 2 + 1
        2 + 2 + 1 + 2
        2 + 1 + 2 + 1 + 1
        2 + 1 + 2 + 2
        2 + 1 + 1 + 2 + 1
        2 + 1 + 1 + 1 + 2
        1 + 2 + 1 + 1 + 1 + 1
        1 + 2 + 2 + 1 + 1
        1 + 2 + 2 + 2
        1 + 2 + 1 + 2 + 1
        1 + 2 + 1 + 1 + 2
        1 + 1 + 2 + 1 + 1 + 1
        1 + 1 + 2 + 2 + 1
        1 + 1 + 2 + 1 + 2
        1 + 1 + 1 + 2 + 1 + 1
        1 + 1 + 1 + 2 + 2
        1 + 1 + 1 + 1 + 2 + 1
        1 + 1 + 1 + 1 + 1 + 2

        */
        public int ClimbStairs(int n)
        {
            //int sum = 0;
            //n++;
            //while (n > 0)
            //{
            //    sum += 2 * n - 3;
            //    n--;
            //}

            // 1 2 3 4 5  6  7
            // 1 2 3 5 8 13 21
            if (n == 1) return 1;
            int a = 1;
            int b = 1;
            for (int i = 1; i < n; i++)
            {
                int temp = b;
                b = a + b;
                a = temp;
            }
            return b;
            //return n switch
            //{
            //    2 => 2,
            //    < 2 => 1,
            //    _ => ClimbStairs(n - 1) + ClimbStairs(n - 2),
            //};
        }
    }
}